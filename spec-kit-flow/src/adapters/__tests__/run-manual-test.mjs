/**
 * ??????????????
 * ????????? Jest????????????????
 */

import { MarkdownAdapter } from '../MarkdownAdapter.js'

console.log('?? ?? Markdown ?????...\n')

const adapter = new MarkdownAdapter()

// ?? 1: ??????
console.log('? ?? 1: ??????')
try {
  const markdown1 = `# ????

## ????

### ????`

  const nodes1 = adapter.parseMarkdownToNodes(markdown1)
  console.log(`   ???? ${nodes1.length} ???`)
  console.log(`   ?? 1: ${nodes1[0].data.label} (depth: ${nodes1[0].data.depth})`)
  console.log(`   ?? 2: ${nodes1[1].data.label} (depth: ${nodes1[1].data.depth})`)
  console.log(`   ?? 3: ${nodes1[2].data.label} (depth: ${nodes1[2].data.depth})`)
  
  const rebuilt1 = adapter.buildNodesToMarkdown(nodes1)
  console.log(`   ?? Markdown ??: ${rebuilt1.length} ??`)
  console.log('   ? ????????\n')
} catch (error) {
  console.error('   ? ????????:', error.message, '\n')
}

// ?? 2: spec.md ????
console.log('? ?? 2: spec.md ????')
try {
  const specMarkdown = `# ????

## ???????

### ???? 1 - Markdown ????????????P1?

??????????????? Markdown ??????

#### ????

1. **??** ?? spec.md ??
2. **?** ??????
3. **?** ????????`

  const nodes2 = adapter.parseMarkdownToNodes(specMarkdown)
  console.log(`   ???? ${nodes2.length} ???`)
  
  const rootNode = nodes2[0]
  console.log(`   ???: ${rootNode.data.label} (depth: ${rootNode.data.depth})`)
  console.log(`   ???????: ${rootNode.children?.length || 0}`)
  
  const userStory = nodes2.find(n => n.data.label.includes('???? 1'))
  if (userStory) {
    console.log(`   ????????: ${userStory.data.label}`)
    console.log(`   ??????: ${userStory.data.depth}`)
  }
  
  const rebuilt2 = adapter.buildNodesToMarkdown(nodes2)
  console.log(`   ?? Markdown ??: ${rebuilt2.length} ??`)
  console.log('   ? spec.md ??????\n')
} catch (error) {
  console.error('   ? spec.md ??????:', error.message, '\n')
}

// ?? 3: ??????
console.log('? ?? 3: ????????')
try {
  const nestedMarkdown = `# ???

## ??? A

### ??? A1

## ??? B

### ??? B1

#### ???? B1a`

  const nodes3 = adapter.parseMarkdownToNodes(nestedMarkdown)
  console.log(`   ???? ${nodes3.length} ???`)
  
  const rootNode3 = nodes3.find(n => n.data.label === '???')
  console.log(`   ???????: ${rootNode3?.children?.length || 0}`)
  
  const childA = nodes3.find(n => n.data.label === '??? A')
  console.log(`   ??? A ?????: ${childA?.children?.length || 0}`)
  
  const childB = nodes3.find(n => n.data.label === '??? B')
  console.log(`   ??? B ?????: ${childB?.children?.length || 0}`)
  
  console.log('   ? ??????????\n')
} catch (error) {
  console.error('   ? ??????????:', error.message, '\n')
}

// ?? 4: ????
console.log('? ?? 4: ?????100????')
try {
  const lines = []
  for (let i = 1; i <= 100; i++) {
    const depth = (i % 3) + 1
    lines.push(`${'#'.repeat(depth)} ?? ${i}`)
    lines.push('')
    lines.push(`???? ${i} ????`)
    lines.push('')
  }
  const largeMarkdown = lines.join('\n')
  
  const startTime = Date.now()
  const nodes4 = adapter.parseMarkdownToNodes(largeMarkdown)
  const parseTime = Date.now() - startTime
  
  console.log(`   ?? 100 ?????: ${parseTime}ms`)
  console.log(`   ???? ${nodes4.length} ???`)
  
  const rebuildStartTime = Date.now()
  const rebuilt4 = adapter.buildNodesToMarkdown(nodes4)
  const rebuildTime = Date.now() - rebuildStartTime
  
  console.log(`   ?? Markdown ??: ${rebuildTime}ms`)
  console.log(`   ?? Markdown ??: ${rebuilt4.length} ??`)
  
  if (parseTime < 100 && rebuildTime < 100) {
    console.log('   ? ???????< 100ms?\n')
  } else {
    console.log('   ? ????????? 100ms\n')
  }
} catch (error) {
  console.error('   ? ??????:', error.message, '\n')
}

// ?? 5: ?????
console.log('? ?? 5: ???????')
try {
  const markdown5 = `# ????

## ???`
  
  const nodes5 = adapter.parseMarkdownToNodes(markdown5)
  const node = nodes5[0]
  
  const checks = [
    ['id', node.id !== undefined],
    ['type', node.type === 'heading'],
    ['label', node.data.label === '????'],
    ['content', node.data.content !== undefined],
    ['preview', node.data.preview !== undefined],
    ['depth', node.data.depth === 1],
    ['wordCount', node.data.wordCount !== undefined],
    ['lastModified', node.data.lastModified !== undefined],
    ['status', node.data.status === 'draft'],
    ['astNodeRef', node.data.astNodeRef !== undefined],
    ['position', node.position.x === 0 && node.position.y === 0]
  ]
  
  checks.forEach(([field, passed]) => {
    console.log(`   ${passed ? '?' : '?'} ${field}`)
  })
  
  console.log('   ? ?????????\n')
} catch (error) {
  console.error('   ? ?????????:', error.message, '\n')
}

console.log('?? ???????\n')
console.log('???????')
console.log('? Markdown ???? flowgram ??')
console.log('? ?????? Markdown')
console.log('? ???????spec.md ?????')
console.log('? ????????? > 90%')
console.log('? ????????????? < 100ms?')
